This is rudimentary code to inject your own source into the AX206 based DPFs.
It is fully Linux based for now.

Update: Information about this chip is now available at openschemes.org.
Also, the full original SDK is published on their website, look for AX206.

NEW: 

The current developer distribution no longer uses the 'developer mode'
firmware hack. It now contains a fully featured environment to boot and
flash a AX206 based DPF.

The original developer distribution is obtained via SVN from

https://sourceforge.net/projects/dpf-ax/

----------------------------------------------------------------------------
DPF modes

You can run the DPF firmware in various modes and options:

- Boot Loader Mode: The DPF will be in this mode when you bricked the flash
  or when you press RESET while holding MENU. This is the preferred mode
  when flashing new firmware. You can also get into bootloader mode by
  executing 'Reboot' from a hacked frame's menu and holding the MENU button.
  The screen will then stay dark and the device will register as HID type
  with PID 3318.
  In Boot loader mode, you can also download small binaries into RAM and run
  them without touching the flash. This is useful for development. See
  dpflib/bfload executable to download a RAM binary and run it.
- Developer Mode: hacked original firmware of a number of supported DPFs
  to support some extra features and lcd4linux
- New alternative firmware: Completely replaces internal firmware. This
  is for advanced users who have identified their LCD brand and know how
  to initialize it.

Typically, all firmware manipulation of the DPF is done by python scripts.
These are found in the fw/ folder of the distribution. Most of them work
in all modes, you just have to specify different parameters for the USB
connection, once it's made:

'usb0': Device in bootloader or 'Developer mode' (Blue screen of Hack)
'/dev/sg1' or '/dev/sr1': Device in original CDROM mode

The numbers may vary, typically your /dev/sg0 is your hard disk, /dev/sr1
your existing CDROM.

Before modifying any firmware, it is VERY recommended to make a backup of
the original flash content using the fulldump.py script.

----------------------------------------------------------------------------

The tar file contents are merely:

- libdpf: A library to access the DPF in various modes (Boot mode, SCSI,
  developer mode)
- Python wrapper around the above library
- Python scripts to patch various DPFs (listed in profiles.py) and other
  auxiliaries

Description of a few tools
---------------------------

app_detect.s, detect.py: Simple rudimentary detection for Sitronix/NXP
                         compatible LCD controllers and SPI flash chip. Does
                         not work in bootloader (BL) mode.
fulldump.py:             Performs a dump of the flash according to detected
                         flash size (often specified wrong by vendor).
                         Works in all modes, but is very slow in BL mode
restore.py:              Program full flash image from sector 0 to DPF.
                         Use this in BL mode. Otherwise it may leave
                         sector 0 incomplete and crash.
update.py:               Example to patch single sector with a .ihx file
identify.py:             Tries to identify a flash dump.
hiddetach:               A simple shell script replacment for libhid-detach-device.
                         Use it to "unbind" the device in bootloader mode for libhid.
                         
Developer Mode
---------------

When the unit is in Developer Mode, it registers itself as USB device with
the same VID:PID, but not as USB storage. This allows much faster access using
libusb and as non-root. However, the unit will still use USB storage SCSI
commands, see dpflib for the wrapping over libusb.

Specific commands are implemented using the handler for the SCSI command
0xcd, mode 6. These commands are handled on the DPF by cmdhandler.s
(up to v0.1alpha) and by dpflib/dpflib.c on the target.

Note that the protocol may change in future, once the internal firmware
is fully replaced by something more structured. Thus, you should implement
extras on the dpflib level only, never access USB directly.

Alternative firmware mode
--------------------------

This is for advanced users who wish to implement extra features for their
DPF. The source distribution starting from 0.2 only supports the
alternative firmware by default.

To build your firmware, configure your Makefile for the correct DPF
type and run "make". Then you can simply flash your DPF by putting it into
boot mode and run

restore.py fw_<your DPF type>.bin -f

You might have to press RESET to boot into your new firmware.

Prerequisites
--------------

You need:

- A proper Linux system with GCC, python-dev (libraries and headers to
  compilee your own modules)
Optionally:
- Possibly some knowledge of the 8051, if you want to mess around
- A working sdcc distribution including asx8051, aslink, etc.

Usage
------

1. run 'make' to build the tools and patches
2. Initiate USB connection from the DPF via the menu
3. Wait a while and check dmesg for the /dev/sgX assignment
4. Run 'python hackit.py /dev/sgX' as root (CAREFUL!!!) to probe for
   known DPFs and confirm that you wish to patch the DPF according to the
   instructions.

The hackit.py script checks for a valid DPF, so you can not accidentally
damage your hard disk. Also, it runs a crc32 check on critical modules
for more safety. DO NOT CHANGE the existing checksums. Only *add* new
profiles in profiles.py, don't EVER change existing ones.

Before messing around, you might want to dump the entire flash using the
fulldump.py script.

For those desiring to try adding hacks for other frame models, there is
now a short howto in the reverse/ folder.

----------------------------------------------------------------------------

WARNING: Do not modify the script unless you REALLY know what you are doing.

DISCLAIMER: There is no guarantee that you will not brick your DPF.
The Author(s) of this code take no responsibilities. You are completely on
your own there!
If you bricked your DPF: No worries, you can restore the old image using
the restore.py script (experimental) or the ProgSPI.exe Windows tool
found at openschemes.org.

----------------------------------------------------------------------------

LICENSE:
You are allowed to modify and distribute the code, as long as you keep it
OpenSource. We just trust you that you have a notion of fair usage :-)
You MAY NOT use this code commercially.

One exception: You may note that the source of some included libraries
is not disclosed, due some copyright restrictions on parts of the code.
Once it's rewritten, it can be opensourced later on.

TODO:
1. Windows support, fully featured lcd4linux support via generic DPF library
   (I leave this to others. I hate Windows.)
2. Replace flash firmware with improved opensource environment
   [partially done]
3. Rewrite lcd library

----------------------------------------------------------------------------
Notes about the lcd4linux patch:

The 128x128 DPFs all support an 'Orientation' property, like in the example
section from a lcd4linux config file:

Display dpf {
    Driver     'DPF'
    Port       'usb0'
    Font       '6x8'
    Foreground 'ffffff'
    Background '000000'
    Basecolor  '000000'
	Orientation 0          # Orientation value from 0-3
	Backlight  backlight   # Backlight variable control
}

On the 320x240 frames, this Orientation field is not supported, unless you
wish to mirror your image for some reason. Currently, it can not be switched
at runtime. You'll need to recompile the firmware if you want to change
the default orientation.

Another implemented option as you can see, is the Backlight variable.
You can use values from 0-7, 0 turns it off, 7 is maximum brightness.

----------------------------------------------------------------------------

Find updates and documentation here:

http://tech.section5.ch/news/?p=77

----------------------------------------------------------------------------
