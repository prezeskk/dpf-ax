/**************************************************************************
 * Definitions for the Appotech AX206 CPU
 *
 * This file was generated by dclib/netpp. Modifications to this file will
 * be lost.
 * Stylesheet: reg8051.xsl       (c) 2010-2011 section5
 *
 * Version: 0.1develop
 **************************************************************************/

#define MICROCONTROLLER_8052
#include <mcs51reg.h>
#include "ax206ex.h"


#ifndef _BITMASK_
#define _BITMASK_(msb, lsb) ( (-1 << (msb + 1)) ^ (-1 << lsb) )
#endif
#ifndef _BIT_
#define _BIT_(pos) (1 << pos)
#endif



/*********************************************************
 * Address segment 'SFR'
 *
 * SFR registers from 0x80-0xff
 *********************************************************/
		

/* Port 0 I/O */ 
sfr at 0x80                  p0;
	sbit at 0x80+7   _B_P07;
	sbit at 0x80+6   _B_P06;
	sbit at 0x80+5   _B_P05;
	sbit at 0x80+4   _B_P04;
	sbit at 0x80+3   _B_P03;
	sbit at 0x80+2   _B_P02;
	sbit at 0x80+1   _B_P01;
	sbit at 0x80+0   _B_P00;
#	define P07         _BIT_(7)
#	define P06         _BIT_(6)
#	define P05         _BIT_(5)
#	define P04         _BIT_(4)
#	define P03         _BIT_(3)
#	define P02         _BIT_(2)
#	define P01         _BIT_(1)
#	define P00         _BIT_(0)

/* The stack pointer */ 
sfr at 0x81                  sp;

/* Data Pointer Control */ 
sfr at 0x86                  dpcon;
#	define IA          _BIT_(7)     // IRQ vector base address: 0: 0x0000, 1: 0x1000
#	define DPIDO       _BIT_(6)     // Auto mode: 0: INC, 1: DEC
#	define DPAID       _BIT_(4)     // Automatic DPTR (in/de)crement enable bit

/* Power Control */ 
sfr at 0x87                  pcon;
#	define STOPC       _BIT_(7)
#	define SELRTC      _BIT_(6)
#	define OSCCEN      _BIT_(5)
#	define TMRCSEL     _BITMASK_(4, 3)
#	define TMRCSEL_SHFT  3     // 0: 24 MHz; 1: 12 MHz; 2: 48 MHz; 3: 48 MHz
#	define USBCEN      _BIT_(2)
#	define SLEEP       _BIT_(1)
#	define COREEN      _BIT_(0)

/* Port 1 I/O */ 
sfr at 0x90                  p1;
	sbit at 0x90+7   _B_P17;
	sbit at 0x90+6   _B_P16;
	sbit at 0x90+5   _B_P15;
	sbit at 0x90+4   _B_P14;
	sbit at 0x90+3   _B_P13;
	sbit at 0x90+2   _B_P12;
	sbit at 0x90+1   _B_P11;
	sbit at 0x90+0   _B_P10;
#	define P17         _BIT_(7)
#	define P16         _BIT_(6)
#	define P15         _BIT_(5)
#	define P14         _BIT_(4)
#	define P13         _BIT_(3)
#	define P12         _BIT_(2)
#	define P11         _BIT_(1)
#	define P10         _BIT_(0)

/* Multiplier Result 0 */ 
sfr at 0x91                  mulres0;

/* Multiplier Result 1 */ 
sfr at 0x92                  mulres1;

/* Multiplier Result 2 */ 
sfr at 0x93                  mulres2;

/* Multiplier Result 3 */ 
sfr at 0x94                  mulres3;

/* Multiplier Control */ 
sfr at 0x98                  mulcon;
	sbit at 0x98+5   _B_MULR2;     // Round Bit 2 After Shift
	sbit at 0x98+4   _B_MULR1;     // Round Bit 1 After Shift
	sbit at 0x98+3   _B_MULR0;     // Round Bit 0 After Shift
	sbit at 0x98+0   _B_MULSH;     // Arithmetic shift after Multiply
#	define MULR2       _BIT_(5)     // Round Bit 2 After Shift
#	define MULR1       _BIT_(4)     // Round Bit 1 After Shift
#	define MULR0       _BIT_(3)     // Round Bit 0 After Shift
#	define MULSH       _BITMASK_(2, 0)
#	define MULSH_SHFT  0     // Arithmetic shift after Multiply

/* Port Wakeup Pending */ 
sfr at 0x9a                  wkpnd;
#	define WPDP        _BIT_(3)     // USBDP Wakeup pending bit (1: pending)
#	define WPP07       _BIT_(2)     // P0.7 Wakeup pending bit (1: pending)
#	define WPP06       _BIT_(1)     // P0.6 Wakeup pending bit (1: pending)
#	define WPP05       _BIT_(0)     // P0.5 Wakeup pending bit (1: pending)

/* Port Wakeup Enable Register */ 
sfr at 0x9b                  wken;
#	define WEDP        _BIT_(3)     // USB Wakeup Disable(1)
#	define WEP07       _BIT_(2)     // P0.7 Wakeup Disable(1)
#	define WEP06       _BIT_(1)     // P0.6 Wakeup Disable(1)
#	define WEP05       _BIT_(0)     // P0.5 Wakeup Disable(1)

/* Wakeup Edge, 0: Rising, 1: Falling. See wken register */ 
sfr at 0x9c                  wkedg;

/* Port 2 I/O */ 
sfr at 0xa0                  p2;
	sbit at 0xa0+7   _B_P27;
	sbit at 0xa0+6   _B_P26;
	sbit at 0xa0+5   _B_P25;
	sbit at 0xa0+4   _B_P24;
	sbit at 0xa0+3   _B_P23;
	sbit at 0xa0+2   _B_P22;
	sbit at 0xa0+1   _B_P21;
	sbit at 0xa0+0   _B_P20;
#	define P27         _BIT_(7)
#	define P26         _BIT_(6)
#	define P25         _BIT_(5)
#	define P24         _BIT_(4)
#	define P23         _BIT_(3)
#	define P22         _BIT_(2)
#	define P21         _BIT_(1)
#	define P20         _BIT_(0)

/* Port Input Enable */ 
sfr at 0xa4                  pie;

/* Clock Control */ 
sfr at 0xa5                  ckcon;
#	define IROMCEN     _BIT_(0)     // IROM clock enable

/* IRQ enable */ 
sfr at 0xa8                  ie;
	sbit at 0xa8+7   _B_EA;     // Global IRQ enable
	sbit at 0xa8+6   _B_RAWIE;     // Reset and watchdog IRQ enable
	sbit at 0xa8+5   _B_WAUIE;     // Port/UART IRQ enable
	sbit at 0xa8+4   _B_SPIIE;     // SPI interrupt enable
	sbit at 0xa8+3   _B_USBIE;     // USB interrupt enable
	sbit at 0xa8+2   _B_T2IE;     // Timer2 IRQ enable
	sbit at 0xa8+1   _B_T1IE;     // Timer1 IRQ enable
	sbit at 0xa8+0   _B_T0IE;     // Timer0 IRQ enable
#	define EA          _BIT_(7)     // Global IRQ enable
#	define RAWIE       _BIT_(6)     // Reset and watchdog IRQ enable
#	define WAUIE       _BIT_(5)     // Port/UART IRQ enable
#	define SPIIE       _BIT_(4)     // SPI interrupt enable
#	define USBIE       _BIT_(3)     // USB interrupt enable
#	define T2IE        _BIT_(2)     // Timer2 IRQ enable
#	define T1IE        _BIT_(1)     // Timer1 IRQ enable
#	define T0IE        _BIT_(0)     // Timer0 IRQ enable

/* Port 3 I/O */ 
sfr at 0xb0                  p3;
	sbit at 0xb0+7   _B_P37;
	sbit at 0xb0+6   _B_P36;
	sbit at 0xb0+5   _B_P35;
	sbit at 0xb0+4   _B_P34;
	sbit at 0xb0+3   _B_P33;
	sbit at 0xb0+2   _B_P32;
	sbit at 0xb0+1   _B_P31;
	sbit at 0xb0+0   _B_P30;
#	define P37         _BIT_(7)
#	define P36         _BIT_(6)
#	define P35         _BIT_(5)
#	define P34         _BIT_(4)
#	define P33         _BIT_(3)
#	define P32         _BIT_(2)
#	define P31         _BIT_(1)
#	define P30         _BIT_(0)

/* Timer0 Control */ 
sfr at 0xb1                  tmr0con;
#	define T0PND       _BIT_(7)     // Timer pending
#	define T0OS        _BIT_(3)     // External clock select; 0: P2.1, 1: RTC
#	define T0CS        _BIT_(2)     // Clock mode; 0: Sysclk, 1: ext
#	define T0SE        _BIT_(1)     // Clock edge; 0: rising, 1: falling
#	define T0ON        _BIT_(0)     // Timer enable

/* Timer0 Counter */ 
sfr at 0xb3                  tmr0cnt;

/* Timer0 Period */ 
sfr at 0xb4                  tmr0pr;

/* Timer0 Prescaler */ 
sfr at 0xb5                  tmr0psr;
#	define T0PSR       _BITMASK_(2, 0)
#	define T0PSR_SHFT  0

/* Interrupt Priority */ 
sfr at 0xb8                  ip;
	sbit at 0xb8+7   _B_WDTIE;     // Watchdog overflow mode
	sbit at 0xb8+6   _B_RAWIP;     // RTC and Watchdog
	sbit at 0xb8+5   _B_WAUIP;     // Port/UART
	sbit at 0xb8+4   _B_SPIIP;     // SPI
	sbit at 0xb8+3   _B_USBIP;     // USB
	sbit at 0xb8+2   _B_T2IP;     // Timer 2 IRQ
	sbit at 0xb8+1   _B_T1IP;     // Timer 1 IRQ
	sbit at 0xb8+0   _B_T0IP;     // Timer 0 IRQ
#	define WDTIE       _BIT_(7)     // Watchdog overflow mode
#	define RAWIP       _BIT_(6)     // RTC and Watchdog
#	define WAUIP       _BIT_(5)     // Port/UART
#	define SPIIP       _BIT_(4)     // SPI
#	define USBIP       _BIT_(3)     // USB
#	define T2IP        _BIT_(2)     // Timer 2 IRQ
#	define T1IP        _BIT_(1)     // Timer 1 IRQ
#	define T0IP        _BIT_(0)     // Timer 0 IRQ

/* Watchdog Control */ 
sfr at 0xbb                  wdtcon;
#	define WDTTO       _BIT_(7)     // Watchdog Timeout; 1: Timeout
#	define WDTPD       _BIT_(6)     // CPU sleep bit; 1: CPU slept
#	define WDTPND      _BIT_(5)     // WDOG Timer busy; R: 1: busy, W: 1: clear busy
#	define WDTEN       _BIT_(4)     // WDOG Timer enable
#	define WDTPSR      _BITMASK_(3, 0)
#	define WDTPSR_SHFT  0     // WDOG Timer Postscaler

/* Bit Fetcher Counter */ 
sfr at 0xbc                  bfcnt;
#	define BFCNT       _BITMASK_(3, 0)
#	define BFCNT_SHFT  0

/* Bit Fetcher Buffer low */ 
sfr at 0xbd                  bfbuf0;

/* Bit Fetcher Buffer Mid */ 
sfr at 0xbe                  bfbuf1;

/* Bit Fetcher Buffer high */ 
sfr at 0xbf                  bfbuf2;

/* Port 3 I/O */ 
sfr at 0xc0                  p4;
	sbit at 0xc0+2   _B_P42;
	sbit at 0xc0+1   _B_P41;
	sbit at 0xc0+0   _B_P40;
#	define P42         _BIT_(2)
#	define P41         _BIT_(1)
#	define P40         _BIT_(0)

/* Timer2 Control */ 
sfr at 0xc1                  tmr2con;
#	define T2POS2      _BIT_(7)     // PWM Out P4.1 Select
#	define T2POS1      _BIT_(6)     // PWM Out P2.6 Select
#	define T2S         _BIT_(5)     // Clock Source Select; 0: Sysclk, 1: RTC
#	define T2POEN      _BIT_(4)     // PWM out enable
#	define T2PSR       _BITMASK_(3, 1)
#	define T2PSR_SHFT  1     // Prescaler
#	define T2ON        _BIT_(0)     // Timer enable

/* Timer2 Counter low */ 
sfr at 0xc2                  tmr2cntl;

/* Timer2 Counter high */ 
sfr at 0xc3                  tmr2cnth;

/* Timer2 Period low */ 
sfr at 0xc4                  tmr2perl;

/* Timer2 Period high */ 
sfr at 0xc5                  tmr2perh;

/* Timer2 PWM Duty Cycle low */ 
sfr at 0xc6                  tmr2pwml;

/* Timer2 PWM Duty Cycle high */ 
sfr at 0xc7                  tmr2pwmh;

/* USB Control */ 
sfr at 0xc8                  usbcon;
	sbit at 0xc8+7   _B_SOFPND;     // R: 1: pending, W: 0: clear SOF pending
	sbit at 0xc8+6   _B_USBDONE;     // R/W done (1)
	sbit at 0xc8+5   _B_USBRST;     // 1: Reset
	sbit at 0xc8+4   _B_PHYEN;     // Phy Enable (1)
	sbit at 0xc8+3   _B_DPPU;     // DPU PU select (1)
	sbit at 0xc8+2   _B_USBRNW;     // USB operation select; 0: Write, 1: Read
	sbit at 0xc8+0   _B_USBKS;     // 1: initiate USB transaction (kick start)
#	define SOFPND      _BIT_(7)     // R: 1: pending, W: 0: clear SOF pending
#	define USBDONE     _BIT_(6)     // R/W done (1)
#	define USBRST      _BIT_(5)     // 1: Reset
#	define PHYEN       _BIT_(4)     // Phy Enable (1)
#	define DPPU        _BIT_(3)     // DPU PU select (1)
#	define USBRNW      _BIT_(2)     // USB operation select; 0: Write, 1: Read
#	define USBKS       _BIT_(0)     // 1: initiate USB transaction (kick start)

/* USB Data I/O */ 
sfr at 0xc9                  usbdata;

/* USB Address */ 
sfr at 0xca                  usbadr;

/* Multiplier Operand X low */ 
sfr at 0xcb                  mulxl;

/* Multiplier Operand X high */ 
sfr at 0xcc                  mulxh;

/* Multiplier Operand Y low */ 
sfr at 0xcd                  mulyl;

/* Multiplier Operand Y high */ 
sfr at 0xce                  mulyh;

/* Program Status */ 
sfr at 0xd0                  psw;

/* RTC Counter */ 
sfr at 0xd1                  rtcnt;

/* ADC Control */ 
sfr at 0xd2                  adccon;
#	define ADCGO       _BIT_(7)     // RD: Conversion finished (0), WR: Start Conversion (1)
#	define EOC         _BIT_(6)     // End of conversion
#	define ADCCHOP     _BIT_(5)     // ADC offset chopper enable
#	define VREFSEL     _BIT_(4)     // VRef select O: AVDD; 1: P1.0
#	define ADCEN       _BIT_(3)     // ADC enable
#	define ADCSEL      _BITMASK_(2, 0)
#	define ADCSEL_SHFT  0     // ADC input select

/* ADC Baudrate control */ 
sfr at 0xd3                  adcrate;
#	define TMREN       _BIT_(7)     // Timer Input Enable
#	define ADCTS       _BIT_(6)     // Timer Source
#	define ADCRATE     _BITMASK_(5, 0)
#	define ADCRATE_SHFT  0     // ADC conversion rate

/* ADC buffer high */ 
sfr at 0xd4                  adcbufh;

/* SPI clock rate register */ 
sfr at 0xd6                  spirate;

/* SPI data I/O register */ 
sfr at 0xd7                  spibuf;

/* SPI control register */ 
sfr at 0xd8                  spicon;
	sbit at 0xd8+7   _B_SPIPND;     // SPI transaction: 0: busy; 1: completed
	sbit at 0xd8+6   _B_SPISM;     // 0: Master, 1: Slave
	sbit at 0xd8+5   _B_SPIRT;     // 2 wire mode: 0: TX, 1: RX
	sbit at 0xd8+4   _B_SPIWS;     // SPI mode: 0: 3-wire, 1: 2-wire
	sbit at 0xd8+2   _B_SPIEDGE;     // Sample edge: 0: F, 1: R (SPIIDST=0), 0: R, 1: F (SPIIDST=1)
	sbit at 0xd8+1   _B_SPIIDST;     // SPI idle: 0: low, 1: high
	sbit at 0xd8+0   _B_SPIEN;     // SPI enable
#	define SPIPND      _BIT_(7)     // SPI transaction: 0: busy; 1: completed
#	define SPISM       _BIT_(6)     // 0: Master, 1: Slave
#	define SPIRT       _BIT_(5)     // 2 wire mode: 0: TX, 1: RX
#	define SPIWS       _BIT_(4)     // SPI mode: 0: 3-wire, 1: 2-wire
#	define SPIEDGE     _BIT_(2)     // Sample edge: 0: F, 1: R (SPIIDST=0), 0: R, 1: F (SPIIDST=1)
#	define SPIIDST     _BIT_(1)     // SPI idle: 0: low, 1: high
#	define SPIEN       _BIT_(0)     // SPI enable

/* ADC buffer low */ 
sfr at 0xdc                  adcbufl;

/* Timer1 Control */ 
sfr at 0xe1                  tmr1con;
#	define T1POS2      _BIT_(7)     // PWM Out P4.0 Select
#	define T1POS1      _BIT_(6)     // PWM Out P2.3 Select
#	define T1S         _BITMASK_(5, 4)
#	define T1S_SHFT  4     // Clock mode; 0: Sysclk, 1: EXT rising, 2: EXT falling, 3: RTC
#	define T1OD        _BIT_(2)     // PWM Open Drain Output
#	define T1POEN      _BIT_(1)     // PWM Output Enable
#	define T1ON        _BIT_(0)     // Timer Enable

/* Timer1 Counter low */ 
sfr at 0xe2                  tmr1cntl;

/* Timer1 Counter high */ 
sfr at 0xe3                  tmr1cnth;

/* Timer1 Period low */ 
sfr at 0xe4                  tmr1perl;

/* Timer1 Period high */ 
sfr at 0xe5                  tmr1perh;

/* Timer1 PWM Duty Cycle low */ 
sfr at 0xe6                  tmr1pwml;

/* Timer1 PWM Duty Cycle high */ 
sfr at 0xe7                  tmr1pwmh;
sfr at 0xe8                  eif0;
	sbit at 0xe8+4   _B_DIM;     // USB DM (D-) input
	sbit at 0xe8+3   _B_DIP;     // USB DP (D+) input
	sbit at 0xe8+2   _B_T2P;     // Timer2; R: 1: pending; W: 0: clear
	sbit at 0xe8+1   _B_T1P;     // Timer1; R: 1: pending; W: 0: clear
	sbit at 0xe8+0   _B_T0P;     // Timer0; R: 1: pending; W: 0: clear
#	define DIM         _BIT_(4)     // USB DM (D-) input
#	define DIP         _BIT_(3)     // USB DP (D+) input
#	define T2P         _BIT_(2)     // Timer2; R: 1: pending; W: 0: clear
#	define T1P         _BIT_(1)     // Timer1; R: 1: pending; W: 0: clear
#	define T0P         _BIT_(0)     // Timer0; R: 1: pending; W: 0: clear

/* P0 Port direction (1: Input) */ 
sfr at 0xe9                  p0dir;

/* P1 Port direction (1: Input) */ 
sfr at 0xea                  p1dir;

/* P2 Port direction (1: Input) */ 
sfr at 0xeb                  p2dir;

/* P3 Port direction (1: Input) */ 
sfr at 0xec                  p3dir;

/* P4 Port direction (1: Input) */ 
sfr at 0xed                  p4dir;

/* UART Status */ 
sfr at 0xf1                  uartsta;
#	define DONE        _BIT_(7)     // TX done
#	define FER         _BIT_(6)     // Frame Error Flag
#	define RXDONE      _BIT_(5)     // RX has completed
#	define TXDONE      _BIT_(4)     // TX has completed
#	define USRC        _BIT_(0)     // I/O select; 0: TX=P2.7, RX=P2.5; 1: TX=P4.1, RX=P4.0

/* UART Control */ 
sfr at 0xf2                  uartcon;
#	define UTSBS       _BIT_(7)     // 0: 1 stop bit, 1: 2 stop bits
#	define UTTXNB      _BIT_(6)     // 9 Bit value
#	define NBITEN      _BIT_(5)     // 9 Bit mode (1)
#	define UTEN        _BIT_(4)     // UART enable
#	define UTTXINV     _BIT_(3)     // TX invert (1)
#	define UTRXINV     _BIT_(2)     // RX invert (1)
#	define TXIE        _BIT_(1)     // TX IRQ Enable (1)
#	define RXIE        _BIT_(0)     // RX IRQ Enable (1)

/* UART Baudrate */ 
sfr at 0xf3                  uartbaud;
sfr at 0xf8                  tmr3con;
	sbit at 0xf8+7   _B_BOREN;     // BOR Enable
	sbit at 0xf8+6   _B_BOROEN;     // BOR Output Enable
	sbit at 0xf8+5   _B_BGOEN;     // Bandgap Output Enable
	sbit at 0xf8+4   _B_T3FB;     // RTC Feedback Resistor Enable
	sbit at 0xf8+3   _B_T3CP;     // Clear RTC Pending
	sbit at 0xf8+2   _B_T3IE;     // RTC IRQ Enable
	sbit at 0xf8+1   _B_T3LP;     // Low Power Mode Enable
	sbit at 0xf8+0   _B_T3ON;     // RTC enable
#	define BOREN       _BIT_(7)     // BOR Enable
#	define BOROEN      _BIT_(6)     // BOR Output Enable
#	define BGOEN       _BIT_(5)     // Bandgap Output Enable
#	define T3FB        _BIT_(4)     // RTC Feedback Resistor Enable
#	define T3CP        _BIT_(3)     // Clear RTC Pending
#	define T3IE        _BIT_(2)     // RTC IRQ Enable
#	define T3LP        _BIT_(1)     // Low Power Mode Enable
#	define T3ON        _BIT_(0)     // RTC enable

/* Port0 Pull-up; 1: enable Pullup */ 
sfr at 0xf9                  p0up;

/* Port1 Pull-up; 1: enable Pullup */ 
sfr at 0xfa                  p1up;

/* Port2 Pull-up; 1: enable Pullup */ 
sfr at 0xfb                  p2up;

/* Port3 Pull-up; 1: enable Pullup */ 
sfr at 0xfc                  p3up;

/* Port4 Pull-up; 1: enable Pullup */ 
sfr at 0xfd                  p4up;

/*********************************************************
 * Address segment 'USB'
 *
 * The indirect USB controller registers
 *********************************************************/
		
#define R_USB_FAddr                0x00
#	define UPDATE      _BIT_(7)
#	define ADDR        _BITMASK_(6, 0)
#	define ADDR_SHFT  0
#define R_USB_Power                0x01
#	define RESET       _BIT_(3)
#	define RESUME      _BIT_(2)
#	define SUSPEND     _BIT_(1)
#	define EN_SUSP     _BIT_(0)
#define R_USB_IntrIn1              0x02
#	define EP2         _BIT_(2)
#	define EP1         _BIT_(1)
#	define EP0         _BIT_(0)
#define R_USB_IntrOut1             0x04
#	define EP2         _BIT_(2)
#	define EP1         _BIT_(1)
#define R_USB_IntrUSB              0x06
#	define ISOF        _BIT_(3)
#	define IRST        _BIT_(2)
#	define IRESM       _BIT_(1)
#	define ISUSP       _BIT_(0)
#define R_USB_IntrIn1E             0x07
#define R_USB_IntrOut1E            0x09
#define R_USB_IntrUSBE             0x0b
#define R_USB_Frame1               0x0c
#define R_USB_Frame2               0x0d
#define R_USB_Index                0x0e
#define R_USB_FIFO0                0x20
#define R_USB_FIFO1                0x21

/*********************************************************
 * Address segment 'USBIndexed'
 *
 * USB indexed registers
 *********************************************************/
		
#define R_USBIndexed_InMaxP               0x10
#define R_USBIndexed_CSR0                 0x11
#	define E0_SSUEND   _BIT_(7)     // SetupEnd service. Write 1 to clear.
#	define E0_SOPRDY   _BIT_(6)     // Out packet serviced. Write 1 to clear.
#	define E0_SDSTL    _BIT_(5)     // Send stall. Write 1 to terminate current tx.
#	define E0_SUEND    _BIT_(4)     // Setup end. Generates IRQ, W1C
#	define E0_DATAEND  _BIT_(3)     // Data end. Autocleared.
#	define E0_STSTL    _BIT_(2)     // 1: Got stall handshake. Clear manually.
#	define E0_INPRDY   _BIT_(1)     // Set bit when TX packet ready.
#	define E0_OPRDY    _BIT_(0)     // 1 if RX packet ready. Clears when E0_SOPRDY is set.
#define R_USBIndexed_InCSR1               0x11
#	define INCLRDT     _BIT_(6)     // Write 1 to clear EP IN data toggle
#	define INSTSTL     _BIT_(5)     // 1: Got stall. W0C.
#	define INSDSTL     _BIT_(4)     // 1: Send stall. Clear manually after.
#	define INFLUSH     _BIT_(3)     // Flush 1 pkt from IN FIFO
#	define INUNDRUN    _BIT_(2)     // FIFO underrun
#	define INFIFONE    _BIT_(1)     // At least 1 pkt in FIFO
#	define INPRDY      _BIT_(0)     // In Pkt ready. Autocleared, generates IRQ.
#define R_USBIndexed_InCSR2               0x12
#	define AUTOSET     _BIT_(7)     // 1: INPRDY automatically set when pkt in FIFO
#	define ISO         _BIT_(6)     // 1: Isochronous EP1 mode
#	define MODE        _BIT_(5)     // Endpoint direction; 1: IN, 0: OUT
#	define INDMAEN     _BIT_(4)     // 1: Enable DMA for IN
#	define FORCEDTOG   _BIT_(3)     // 1: Force IN data toggle
#define R_USBIndexed_OutMaxP              0x13
#define R_USBIndexed_OutCSR1              0x14
#	define OCLRDT      _BIT_(7)     // Write 1 to clr data toggle
#	define OSTSTL      _BIT_(6)     // Got handshake STALL. W0C.
#	define OSDSTL      _BIT_(5)     // Send STALL. Clear after.
#	define OFLUSH      _BIT_(4)     // Flush 1 pkt from OUT FIFO
#	define ODATERR     _BIT_(3)     // Data error in ISO mode
#	define OOVRUN      _BIT_(2)     // Overrun, ISO mode only. W0C.
#	define OFIFOFUL    _BIT_(1)     // FIFO full
#	define OPRDY       _BIT_(0)     // Out pkt ready. W0C when done.
#define R_USBIndexed_OutCSR2              0x15
#	define ISO         _BIT_(6)     // 1: Isochronous mode for OUT EP
#	define ODMAEN      _BIT_(5)     // Enable DMA for OUT EP
#	define DMAMOD      _BIT_(4)     // DMA mode. See HW reference
#define R_USBIndexed_Count0               0x16
#define R_USBIndexed_OutCount1            0x16
#define R_USBIndexed_OutCount2            0x17
